{"version":3,"sources":["matrix.jsx","matrix-parallax.jsx"],"names":["Matrix","React","Component","constructor","props","state","canvas","draw","bind","updateDimensions","componentDidMount","setState","refs","columns","context","getContext","size","colSize","width","fullscreen","window","innerWidth","height","innerHeight","numberOfColumns","Math","floor","initialDraw","source","i","push","interval","setInterval","speed","addEventListener","globalCompositeOperation","fillStyle","fadeRate","fillRect","color","font","fontSize","whichRow","index","random","length","character","positionX","positionY","fillText","frequency","render","style","overflow","zIndex","backgroundColor","PropTypes","number","bool","string","object","classes","fullWindow","justifyContent","justifyItems","matrix","position","transform","transition","moveableChildren","flexDirection","fontFamily","boxMarginTop","boxMarginLeft","forgroundMatrixParalaxFactor","parallaxRate","boxChildrenParallaxRate","backgroundParallaxRate","bodyListener","document","body","e","centerX","centerY","distanceFromCenterY","pageY","distanceFromCenterX","pageX","componentWillUnmount","removeEventListener","top","left","backMatrixProps","marginLeft","marginTop","children","frontMatrixProps"],"mappings":"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","file":"matrix-parallax.map","sourceRoot":"../src","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Matrix extends React.Component {\n    static propTypes = {\n        width: PropTypes.number,\n        height: PropTypes.number,\n        fullscreen: PropTypes.bool,\n        colSize: PropTypes.number,\n        fontSize: PropTypes.number,\n        interval: PropTypes.number,\n        color: PropTypes.string,\n        frequency: PropTypes.number,\n        speed: PropTypes.number,\n        style: PropTypes.object,\n        zIndex: PropTypes.number,\n        fadeRate: PropTypes.number,\n        backgroundColor: PropTypes.string\n    };\n\n    static defaultProps = {\n        width: 640,\n        height: 480,\n        fullscreen: false,\n        colSize: 11,\n        fontSize: 13.5,\n        interval: 30,\n        color: '#00cc33',\n        frequency: 0.005,\n        speed: 1.6,\n        fadeRate: 0.05,\n        backgroundColor: 'black'\n    };\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            canvas: null\n        }\n\n        this.draw = this.draw.bind(this)\n        this.updateDimensions = this.updateDimensions.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({ canvas: this.refs.canvas }, () => {\n            let columns = []\n            let context = this.state.canvas.getContext('2d')\n            let size = this.props.colSize\n            let source = '0 0 1 1'\n            let width = this.props.fullscreen ? window.innerWidth : this.props.width\n            let height = this.props.fullscreen ? window.innerHeight : this.props.height\n            let canvas = this.state.canvas\n            canvas.width = width\n            canvas.height = height\n\n            let numberOfColumns = Math.floor(width / size * 3)\n            this.initialDraw = true\n            this.setState({ canvas, columns, context, size, source, numberOfColumns }, () => {\n                for (let i = 0; i < numberOfColumns; i++) {\n                    columns.push(1000)\n                }\n                this.draw()\n\n                let interval = setInterval(this.draw, 50 / this.props.speed)\n                this.setState({ interval })\n\n                if (this.props.fullscreen) { window.addEventListener('resize', this.updateDimensions) }\n            })\n            this.initialDraw = false\n        })\n    }\n\n    draw() {\n        let context = this.state.context\n        let columns = this.state.columns\n        let numberOfColumns = this.state.numberOfColumns\n\n        // switch to only affect the intersection of the existing canvas, and fade everything\n        context.globalCompositeOperation = 'destination-out'\n        context.fillStyle = `rgba(255, 255, 255, ${this.props.fadeRate})`\n        context.fillRect(0, 0, this.state.canvas.width, this.state.canvas.width)\n        // switch back to the normal mode of writing on top of the canvas\n        context.globalCompositeOperation = 'source-over'\n\n        context.fillStyle = this.props.color\n        context.font = '700 ' + this.props.fontSize + 'px Consolas,monaco,monospace'\n\n        for (let whichRow = 0; whichRow < numberOfColumns; whichRow++) {\n            let index = Math.floor(Math.random() * this.state.source.length)\n            let character = this.state.source[index]\n            let positionX = whichRow * this.state.size\n            let positionY = columns[whichRow] * this.state.size\n\n            context.fillText(character, positionX, positionY)\n            if (positionY >= this.state.canvas.height && Math.random() > 1 - this.props.frequency) {\n                columns[whichRow] = 0\n            }\n            columns[whichRow]++\n        }\n\n        this.setState({ context, columns })\n    };\n\n    updateDimensions() {\n        let canvas = this.state.canvas\n        canvas.width = window.innerWidth\n        canvas.height = window.innerHeight\n    }\n\n    render() {\n        let style = this.props.style ? this.props.style : {}\n        return (\n            <div style={{\n                ...style,\n                width: this.props.fullscreen ? '100vw' : this.props.width + 'px',\n                height: this.props.fullscreen ? '100vh' : this.props.height + 'px',\n                overflow: 'hidden',\n                zIndex: this.props.zIndex,\n                backgroundColor: this.props.backgroundColor\n            }}\n            >\n                <canvas ref='canvas' />\n            </div>\n        )\n    }\n}","import React from 'react'\nimport { withStyles } from '@material-ui/styles'\nimport Matrix from './matrix'\n\nexport const classes = {\n    fullWindow: {\n        width: '100vw',\n        height: '100vh',\n        justifyContent: 'center',\n        justifyItems: 'center'\n    },\n    matrix: {\n        position: 'fixed',\n        zIndex: '-1',\n        transform: 'scale(1.2)',\n        transition: 'margin 500ms cubic-bezier(.19,1,.06,.99) 0s'\n    },\n    moveableChildren: {\n        flexDirection: 'column',\n        backgroundColor: 'transparent',\n        zIndex: '2',\n        transition: 'margin 500ms cubic-bezier(.19,1,.06,.99) 0s',\n        color: 'rgba(122, 229, 114, 0.87)',\n        fontFamily: 'monospace'\n    }\n}\n\nexport default withStyles(classes)(class extends React.Component {\n    static defaultProps = {\n        parallaxRate: 2,\n        backgroundColor: 'rgba(0 ,0 ,0 , 1)',\n        frontMatrixProps: {},\n        backMatrixProps: {}\n    };\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            boxMarginTop: window.innerHeight / 2,\n            boxMarginLeft: window.innerWidth / 2\n        }\n\n        this.forgroundMatrixParalaxFactor = this.props.parallaxRate\n        this.boxChildrenParallaxRate = this.props.parallaxRate * 2\n        this.backgroundParallaxRate = this.props.parallaxRate * 4\n\n        this.bodyListener = document.body.addEventListener('mousemove', (e) => {\n            let centerX = window.innerWidth / 2\n            let centerY = window.innerHeight / 2\n            let distanceFromCenterY = e.pageY - centerY\n            let distanceFromCenterX = e.pageX - centerX\n            this.setState({ boxMarginTop: distanceFromCenterY, boxMarginLeft: distanceFromCenterX })\n        })\n    }\n\n    componentWillUnmount() {\n        // clean up by removing the listener\n        document.body.removeEventListener('mousemove', this.bodyListener)\n    }\n\n    render() {\n        return <div className={this.props.classes.fullWindow} >\n            {/* Background matrix */}\n            <Matrix\n                style={{\n                    ...classes.matrix,\n                    top: -this.state.boxMarginTop / this.backgroundParallaxRate,\n                    left: -this.state.boxMarginLeft / this.backgroundParallaxRate\n                }}\n                backgroundColor={this.props.backgroundColor}\n                fontSize={11}\n                frequency={0.001}\n                fullscreen\n                {...this.props.backMatrixProps}\n            />\n            <div\n                className={this.props.classes.moveableChildren}\n                style={{\n                    marginLeft: this.state.boxMarginLeft / this.boxChildrenParallaxRate,\n                    marginTop: this.state.boxMarginTop / this.boxChildrenParallaxRate\n                }} >\n                {this.props.children}\n            </div>\n            {/* Forground matrix */}\n            <Matrix\n                style={{\n                    ...classes.matrix,\n                    top: -this.state.boxMarginTop / this.forgroundMatrixParalaxFactor,\n                    left: -this.state.boxMarginLeft / this.forgroundMatrixParalaxFactor\n                }}\n                backgroundColor='rgba(0,0,0,0)'\n                fontSize={11}\n                frequency={0.001}\n                fullscreen\n                zIndex={3}\n                {...this.props.frontMatrixProps}\n            />\n        </div>\n    }\n})\n"]}